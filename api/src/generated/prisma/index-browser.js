
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CategoryScalarFieldEnum = {
  category_id: 'category_id',
  name: 'name',
  description: 'description',
  parent_id: 'parent_id'
};

exports.Prisma.ClientScalarFieldEnum = {
  client_id: 'client_id',
  name: 'name',
  phone_number: 'phone_number',
  address: 'address',
  email: 'email',
  city: 'city',
  region: 'region',
  country: 'country',
  postal_code: 'postal_code'
};

exports.Prisma.ClientorderScalarFieldEnum = {
  order_id: 'order_id',
  client_id: 'client_id',
  status: 'status',
  timestamp: 'timestamp',
  total_items: 'total_items',
  total_amount: 'total_amount'
};

exports.Prisma.ItemScalarFieldEnum = {
  item_id: 'item_id',
  category_id: 'category_id',
  model: 'model',
  image_path: 'image_path',
  status: 'status',
  manufacturer: 'manufacturer',
  unit_price: 'unit_price',
  date_of_arrival: 'date_of_arrival',
  units_in_stock: 'units_in_stock',
  faulty_units: 'faulty_units'
};

exports.Prisma.OrderproductScalarFieldEnum = {
  order_product_id: 'order_product_id',
  order_id: 'order_id',
  item_id: 'item_id',
  quantity: 'quantity',
  returned_units: 'returned_units'
};

exports.Prisma.OrderreturnScalarFieldEnum = {
  order_return_id: 'order_return_id',
  order_product_id: 'order_product_id',
  quantity: 'quantity',
  reason: 'reason',
  description: 'description',
  status: 'status',
  return_date: 'return_date'
};

exports.Prisma.RoleScalarFieldEnum = {
  role_id: 'role_id',
  name: 'name',
  description: 'description'
};

exports.Prisma.SupplierScalarFieldEnum = {
  supplier_id: 'supplier_id',
  name: 'name',
  email: 'email',
  address: 'address',
  city: 'city',
  region: 'region',
  country: 'country',
  postal_code: 'postal_code',
  phone_number: 'phone_number'
};

exports.Prisma.SupplieritemScalarFieldEnum = {
  id: 'id',
  supplier_id: 'supplier_id',
  item_id: 'item_id'
};

exports.Prisma.UserprofileScalarFieldEnum = {
  user_id: 'user_id',
  role_id: 'role_id',
  client_id: 'client_id',
  login: 'login',
  password: 'password',
  image_path: 'image_path',
  full_name: 'full_name',
  email: 'email',
  phone_number: 'phone_number',
  passport: 'passport'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.order_status = exports.$Enums.order_status = {
  Pending: 'Pending',
  Processing: 'Processing',
  Shipped: 'Shipped',
  Delivered: 'Delivered',
  Canceled: 'Canceled'
};

exports.item_status = exports.$Enums.item_status = {
  In_Stock: 'In_Stock',
  Out_Of_Stock: 'Out_Of_Stock'
};

exports.return_reason = exports.$Enums.return_reason = {
  Defective_Product: 'Defective_Product',
  Wrong_Item_Sent: 'Wrong_Item_Sent',
  Item_Not_as_Described: 'Item_Not_as_Described',
  Changed_Mind: 'Changed_Mind',
  Other: 'Other'
};

exports.return_status = exports.$Enums.return_status = {
  Sent: 'Sent',
  Received: 'Received',
  Processing: 'Processing',
  Refunded: 'Refunded',
  Rejected: 'Rejected'
};

exports.Prisma.ModelName = {
  category: 'category',
  client: 'client',
  clientorder: 'clientorder',
  item: 'item',
  orderproduct: 'orderproduct',
  orderreturn: 'orderreturn',
  role: 'role',
  supplier: 'supplier',
  supplieritem: 'supplieritem',
  userprofile: 'userprofile'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
