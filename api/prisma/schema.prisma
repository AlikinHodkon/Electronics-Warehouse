generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  category_id     Int        @id @default(autoincrement())
  nameEN          String     @unique @db.VarChar(255) @map("name_en")
  nameRU          String     @unique @db.VarChar(255) @map("name_ru")
  parent          Category?  @relation("categoryChildren", fields: [parent_id], references: [category_id], onDelete: Cascade, onUpdate: Cascade)
  parent_id       Int?
  item            Item[]     @relation("itemCategory")
  subcategories   Category[] @relation("categoryChildren")

  @@map("category")
}

model Client {
  client_id    Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  phone_number Int
  address      String        @db.VarChar(255)
  email        String        @db.VarChar(255)
  city         String        @db.VarChar(255)
  region       String        @db.VarChar(255)
  country      String        @db.VarChar(255)
  postal_code  Int
  clientOrder  ClientOrder[] @relation("clientClientOrder")
  userProfile  UserProfile[] @relation("userProfileClient")
  reviews      Review[]      @relation("clientReview")

  @@map("client")
}

model ClientOrder {
  order_id     Int            @id @default(autoincrement())
  client_id    Int
  status       order_status
  timestamp    DateTime       @db.Timestamp(6)
  total_items  Int
  total_amount Float
  client       Client         @relation("clientClientOrder", fields: [client_id], references: [client_id], onDelete: NoAction, onUpdate: NoAction)
  orderProduct OrderProduct[] @relation("clientOrderOrderProduct")

  @@map("clientorder")
}

model Item {
  item_id         Int            @id @default(autoincrement())
  category_id     Int
  modelEN         String         @db.VarChar(255) @map("model_en")
  modelRU         String         @db.VarChar(255) @map("model_ru")
  image_path      String?        @db.VarChar(255)
  manufacturer    String         @db.VarChar(255)
  unit_price      Float          @default(0)
  date_of_arrival DateTime       @db.Timestamp(6)
  units_in_stock  Int            @default(0)
  faulty_units    Int            @default(0)
  category        Category       @relation("itemCategory", fields: [category_id], references: [category_id], onDelete: Cascade, onUpdate: Cascade)
  orderProduct    OrderProduct[] @relation("orderProductItem")
  supplierItem    SupplierItem[] @relation("itemSupplierItem")
  reviews         Review[]       @relation("itemReview")

  @@map("item")
}

model Review {
  id        Int    @id @default(autoincrement())
  item_id   Int
  client_id Int
  title     String @db.VarChar(255)
  content   String
  score     Int
  item      Item   @relation("itemReview", fields: [item_id], references: [item_id], onDelete: Cascade, onUpdate: Cascade)
  client    Client @relation("clientReview", fields: [client_id], references: [client_id], onDelete: Cascade, onUpdate: Cascade)

  @@map("review")
}

model OrderProduct {
  order_product_id Int           @id @default(autoincrement())
  order_id         Int
  item_id          Int
  quantity         Int
  returned_units   Int           @default(0)
  clientorder      ClientOrder   @relation("clientOrderOrderProduct", fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction)
  item             Item          @relation("orderProductItem", fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction)
  orderReturn      OrderReturn[] @relation("orderReturnOrderProduct")

  @@map("orderproduct")
}

model OrderReturn {
  order_return_id  Int           @id @default(autoincrement())
  order_product_id Int
  quantity         Int
  reason           return_reason
  description      String        @db.VarChar(255)
  status           return_status
  return_date      DateTime      @db.Date
  orderProduct     OrderProduct  @relation("orderReturnOrderProduct", fields: [order_product_id], references: [order_product_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("orderreturn")
}

model Role {
  role_id     Int           @id @default(autoincrement())
  name        String        @unique @db.VarChar(255)
  description String        @db.VarChar(255)
  userprofile UserProfile[] @relation("userProfileRole")

  @@map("role")
}

model Supplier {
  supplier_id  Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  email        String         @db.VarChar(255)
  address      String         @db.VarChar(255)
  city         String         @db.VarChar(255)
  region       String         @db.VarChar(255)
  country      String         @db.VarChar(255)
  postal_code  Int
  phone_number Int
  supplierItem SupplierItem[] @relation("supplierSupplierItem")

  @@map("supplier")
}

model SupplierItem {
  id          Int      @id @default(autoincrement())
  supplier_id Int
  item_id     Int
  item        Item     @relation("itemSupplierItem", fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction)
  supplier    Supplier @relation("supplierSupplierItem", fields: [supplier_id], references: [supplier_id], onDelete: NoAction, onUpdate: NoAction)

  @@map("supplieritem")
}

model UserProfile {
  user_id      Int     @id @default(autoincrement())
  role_id      Int
  client_id    Int?
  login        String  @unique @db.VarChar(255)
  password     String  @db.VarChar(255)
  image_path   String? @db.VarChar(255)
  full_name    String  @db.VarChar(255)
  email        String  @unique @db.VarChar(255)
  phone_number String  @unique @db.VarChar(255)
  passport     Int
  client       Client? @relation("userProfileClient", fields: [client_id], references: [client_id], onDelete: Cascade)
  role         Role    @relation("userProfileRole", fields: [role_id], references: [role_id], onDelete: Cascade)

  @@map("userprofile")
}

enum order_status {
  Pending
  Processing
  Shipped
  Delivered
  Canceled
}

enum return_reason {
  Defective_Product     @map("Defective Product")
  Wrong_Item_Sent       @map("Wrong Item Sent")
  Item_Not_as_Described @map("Item Not as Described")
  Changed_Mind          @map("Changed Mind")
  Other
}

enum return_status {
  Sent
  Received
  Processing
  Refunded
  Rejected
}
