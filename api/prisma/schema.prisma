generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model category {
  category_id Int    @id @default(autoincrement())
  name        String @db.VarChar(255)
  description String @db.VarChar(255)
  parent_id   Int?
  item        item[]
}

model client {
  client_id    Int           @id @default(autoincrement())
  name         String        @db.VarChar(255)
  phone_number Int
  address      String        @db.VarChar(255)
  email        String        @db.VarChar(255)
  city         String        @db.VarChar(255)
  region       String        @db.VarChar(255)
  country      String        @db.VarChar(255)
  postal_code  Int
  clientorder  clientorder[]
  userprofile  userprofile[]
}

model clientorder {
  order_id     Int            @id @default(autoincrement())
  client_id    Int
  status       order_status
  timestamp    DateTime       @db.Timestamp(6)
  total_items  Int
  total_amount Float
  client       client         @relation(fields: [client_id], references: [client_id], onDelete: NoAction, onUpdate: NoAction, map: "clientorder_client_foreign")
  orderproduct orderproduct[]
}

model item {
  item_id         Int            @id @default(autoincrement())
  category_id     Int
  model           String         @db.VarChar(255)
  image_path      String?        @db.VarChar(255)
  status          item_status
  manufacturer    String         @db.VarChar(255)
  unit_price      Float
  date_of_arrival DateTime       @db.Timestamp(6)
  units_in_stock  Int
  faulty_units    Int
  category        category       @relation(fields: [category_id], references: [category_id], onDelete: NoAction, onUpdate: NoAction, map: "item_category_foreign")
  orderproduct    orderproduct[]
  supplieritem    supplieritem[]
}

model orderproduct {
  order_product_id Int           @id @default(autoincrement())
  order_id         Int
  item_id          Int
  quantity         Int
  returned_units   Int           @default(0)
  clientorder      clientorder   @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction, map: "orderproduct_clientorder_foreign")
  item             item          @relation(fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction, map: "orderproduct_item_foreign")
  orderreturn      orderreturn[]
}

model orderreturn {
  order_return_id  Int           @id @default(autoincrement())
  order_product_id Int
  quantity         Int
  reason           return_reason
  description      String        @db.VarChar(255)
  status           return_status
  return_date      DateTime      @db.Date
  orderproduct     orderproduct  @relation(fields: [order_product_id], references: [order_product_id], onDelete: NoAction, onUpdate: NoAction, map: "orderreturn_orderproduct_foreign")
}

model role {
  role_id     Int           @id @default(autoincrement())
  name        String        @unique @db.VarChar(255)
  description String        @db.VarChar(255)
  userprofile userprofile[]
}

model supplier {
  supplier_id  Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  email        String         @db.VarChar(255)
  address      String         @db.VarChar(255)
  city         String         @db.VarChar(255)
  region       String         @db.VarChar(255)
  country      String         @db.VarChar(255)
  postal_code  Int
  phone_number Int
  supplieritem supplieritem[]
}

model supplieritem {
  id          Int      @id @default(autoincrement())
  supplier_id Int
  item_id     Int
  item        item     @relation(fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction, map: "supplieritem_item_foreign")
  supplier    supplier @relation(fields: [supplier_id], references: [supplier_id], onDelete: NoAction, onUpdate: NoAction, map: "supplieritem_supplier_foreign")
}

model userprofile {
  user_id      Int     @id @default(autoincrement())
  role_id      Int
  client_id    Int?
  login        String  @unique @db.VarChar(255)
  password     String  @db.VarChar(255)
  image_path   String? @db.VarChar(255)
  full_name    String  @db.VarChar(255)
  email        String  @unique @db.VarChar(255)
  phone_number Int     @unique
  passport     Int
  client       client? @relation(fields: [client_id], references: [client_id], onDelete: Cascade, map: "userprofile_client_foreign")
  role         role    @relation(fields: [role_id], references: [role_id], onDelete: Cascade, map: "userprofile_role_foreign")
}

enum item_status {
  In_Stock     @map("In Stock")
  Out_Of_Stock @map("Out Of Stock")
}

enum order_status {
  Pending
  Processing
  Shipped
  Delivered
  Canceled
}

enum return_reason {
  Defective_Product     @map("Defective Product")
  Wrong_Item_Sent       @map("Wrong Item Sent")
  Item_Not_as_Described @map("Item Not as Described")
  Changed_Mind          @map("Changed Mind")
  Other
}

enum return_status {
  Sent
  Received
  Processing
  Refunded
  Rejected
}
